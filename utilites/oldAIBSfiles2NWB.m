clear

mainfolder = 'D:\conversion\Allen\First_release\cell_types\'; %fullfile(cd, '\test_cell\');
outputfolder = 'D:\output_AIBS1\'; %[cd, '\'];
cellList = dir([mainfolder,'*.nwb']);
T = struct2table(load('cell_types_specimen_details.mat'));
alignSamplingMode = 0;
SamplingTarget = 20000;

for n = 1:length(cellList)
    
    cellID = regexp(cellList(n).name,'\d*','Match');
    disp(cellID)  
    idx = find(strcmp(num2str(T.specimen__id1), cellID));
    %% Initializing variables for Sweep table construction
    
    noManuTag = 0;
    sweepCount = 1;
    sweep_series_objects_ch1 = []; sweep_series_objects_ch2 = [];
    filename = [mainfolder,cellList(n).name];
    SweepAmp = []; StimOff = []; StimOn = []; BinaryLP = []; BinarySP = [];
    %%   Initializing nwb file 
    nwb = NwbFile();
    nwb.identifier = cellList(n,1).name;
    nwb.session_description = ...
      'Characterizing intrinsic biophysical properties of cortical neurons; First release from AIBS';

    if isempty(idx)
        disp('Manual entry data not found')
        noManuTag = 1;
         nwb.general_subject = types.core.Subject( ...
      'description', 'NA', 'age', 'NA', ...
      'sex', 'NA', 'species', 'NA');
       corticalArea = 'NA'; 
       initAccessResistance = 'NA';
    else    
      nwb.general_subject = types.core.Subject( ...
        'subject_id', char(T.donor__id(idx)), 'age', num2str(T.donor__age(idx)), ...
        'sex', char(T.donor__sex(idx)), 'species', char(T.donor__species1(idx)), ...
         'genotype', char(T.line_name1(idx)) );      
    end
     nwb.general_institution = 'Allen Institute of Brain Science';
     device_name = 'unknown device';

     nwb.general_devices.set(device_name, types.core.Device());     
     nwb.general_source_script = 'custom matlab script using MATNWB';
     nwb.general_source_script_file_name = mfilename;
     
     
     %% Add anatomical data from histological processing
     
     anatomy = types.core.ProcessingModule(...
                         'description', 'Histological processing',...
                         'dynamictable', []  ...
                               );     
     T.Properties.VariableNames{49}= 'SomaLayerLoc';
     T.Properties.VariableNames{54}= 'DendriticType';
     T.Properties.VariableNames{1} = 'ReporterStatus';
     T.Properties.VariableNames{44} = 'Hemisphere';
     
     T.SomaLayerLoc = cellstr(T.SomaLayerLoc);
     T.DendriticType = cellstr(T.DendriticType);
     T.ReporterStatus = cellstr(T.ReporterStatus);
     T.Hemisphere = cellstr(T.Hemisphere);
     
     AnaTab = table2nwb(T(idx,[1, 49, 44, 54]));  
     anatomy.dynamictable.set('Anatomical data', AnaTab);
     nwb.processing.set('Anatomical data', anatomy);
                           
    %% Getting start date from 1st recording of cell and checking for new session start 
%     date =  h5read(filename, '/session_start_time'); 
%     
%     if length(date) ~= 20
%          date = date(find(date==' ', 1,'first')+1:find(date==' ', 1,'first')+17);
%          nwb.session_start_time = datetime(date, 'InputFormat', ...
%                                     'dd MMM yyyy HH:mm','TimeZone', 'GMT');
%     else
%         nwb.session_start_time =  datetime(date(1:end-1), 'InputFormat', ...
%                                     'yyyy-MM-dd HH:mm:ss','TimeZone', 'UTC');       
%     end       
       nwb.session_start_time = datetime(2018, 1, 21, 2, 30, 3);
   %% Getting run and electrode associated properties  
    device_link = types.untyped.SoftLink(['/general/devices/', device_name]); % lets see if that works
    
    initialRa = h5read(filename, ...
                  '/general/intracellular_ephys/Electrode 1/initial_access_resistance');
              
    initialRa = cell2mat(regexp(initialRa,'\d+\.?\d*','match'));          
    
    ic_elec = types.core.IntracellularElectrode( ...
            'device', device_link, ...
            'description', 'Properties of electrode and run associated to it',...
            'filtering', h5read(filename, ...
                 '/general/intracellular_ephys/Electrode 1/filtering'),...
            'initial_access_resistance', initialRa,...
            'location', h5read(filename, ...
                   '/general/intracellular_ephys/Electrode 1/location')...
               );
     info = h5info(filename);                                                % pull info from file
     icElecPath = info.Groups(4).Groups(2).Groups.Name;
     ic_elec_name = ...
        icElecPath(find(icElecPath=='/', 1,'last')+1:length(icElecPath));
           
     nwb.general_intracellular_ephys.set(ic_elec_name, ic_elec);
     ic_elec_link = types.untyped.SoftLink(['/general/intracellular_ephys/' ic_elec_name]);       
    %% Getting the data

    for s = 1:length(info.Groups(1).Groups(2).Groups)
    
    sweepPath = info.Groups(1).Groups(2).Groups(s).Name; 
    sweepName = sweepPath(...
                     find(sweepPath=='/', 1,'last')+1:length(sweepPath));
  
    stimPath = ['/stimulus/presentation/', sweepName] ;
    
    stimName = h5read(filename,[stimPath,'/aibs_stimulus_name']);
         
    if string(stimName)== "Short Square" || string(stimName)== "Long Square"              
       if string(stimName)== "Long Square" 
                BinaryLP(sweepCount,1)  = 1;
                BinarySP(sweepCount,1)  = 0;
       elseif string(stimName)== "Short Square" 
                BinaryLP(sweepCount,1)  = 0;
                BinarySP(sweepCount,1)  = 1;
       end  
        %% Import Sweeps with potential alignment of sampling rates       
        [nwb, SweepAmp, StimOn, StimOff]  = importSweeps(nwb, ...
                 SweepAmp, StimOn, StimOff, ...
                 alignSamplingMode, SamplingTarget, stimName,...
                 sweepCount, filename, stimPath, sweepPath, sweepName, ...
                    ic_elec_link);  
              
        %% Save sweep info for Sweep table
        sweep_ch2 = types.untyped.ObjectView(['/acquisition/', sweepName]);
        sweep_ch1 = types.untyped.ObjectView(['/stimulus/presentation/', sweepName]);
        sweep_series_objects_ch1 = [sweep_series_objects_ch1, sweep_ch1]; 
        sweep_series_objects_ch2 = [sweep_series_objects_ch2, sweep_ch2];
        
        sweepCount = sweepCount + 1;
    else
        disp([sweepName, ' ',stimName, ' not converted'])
    end
   end
           
 %% Intracellular Recordings Table   
    BinaryLP(isnan(BinaryLP)) = 0;
    BinarySP(isnan(BinarySP)) = 0;
    StimOn(isnan(StimOn)) = 0;
    StimOff(isnan(StimOff)) = 0;
    SweepAmp(isnan(SweepAmp)) = 0;
    
    StimDuration = [];
    StimDuration = StimOff - StimOn;   
     
    ic_rec_table = types.core.IntracellularRecordingsTable( ...
        'categories', {'electrodes', 'stimiuli', 'responses'}, ...
        'colnames', {'recordings_tag'}, ...
        'description', [ ...
            'A table to group together a stimulus and response from a single ', ...
            'electrode and a single simultaneous recording and for storing ', ...
            'metadata about the intracellular recording.'], ...
        'id', types.hdmf_common.ElementIdentifiers( ...
            'data', int64([0:sweepCount-2]) ...
        ) ...
    );

    ic_rec_table.electrodes = types.core.IntracellularElectrodesTable( ...
        'description', 'Table for storing intracellular electrode related metadata.', ...
        'colnames', {'electrode'}, ...
        'id', types.hdmf_common.ElementIdentifiers( ...
            'data', int64([0:sweepCount-2]) ...
        ), ...
        'electrode', types.hdmf_common.VectorData( ...
            'data', repmat(types.untyped.ObjectView(ic_elec), sweepCount-1, 1), ...
            'description', 'Column for storing the reference to the intracellular electrode' ...
        ) ...
    );

    ic_rec_table.stimuli = types.core.IntracellularStimuliTable( ...
        'description', 'Table for storing intracellular stimulus related metadata.', ...
        'colnames', {'stimulus'}, ...
        'id', types.hdmf_common.ElementIdentifiers( ...
            'data', int64([0:sweepCount-2])  ...
        ), ...
        'stimulus', types.core.TimeSeriesReferenceVectorData( ...
            'description', 'Column storing the reference to the recorded stimulus for the recording (rows)', ...
            'data', struct( ...
                'idx_start', [StimOn(StimOn~=0)'], ...
                'count', [StimDuration(StimDuration~=0)], ...
                'timeseries', [sweep_series_objects_ch1] ...
            )...
        )...
    );
    ic_rec_table.responses = types.core.IntracellularResponsesTable( ...
        'description', 'Table for storing intracellular response related metadata.', ...
        'colnames', {'response'}, ...
        'id', types.hdmf_common.ElementIdentifiers( ...
            'data', int64([0:sweepCount-2]) ...
        ), ...
        'response', types.core.TimeSeriesReferenceVectorData( ...
            'description', 'Column storing the reference to the recorded response for the recording (rows)', ...
            'data', struct( ...
                'idx_start', [StimOn'], ...
                'count', [StimDuration], ...
                'timeseries', [sweep_series_objects_ch2]...
            )...
        )...
    );

% Add protocol type as column of electrodes table

Protocols = cell.empty;

for s = 1:length(BinaryLP)
    if BinaryLP(s)
      Protocols(s) = {'LP'};
    elseif BinarySP(s)
      Protocols(s) = {'SP'};   
    else
      Protocols(s) = {'unknown'};          
    end
end

ic_rec_table.categories = [ic_rec_table.categories, {'protocol_type'}];
ic_rec_table.dynamictable.set( ...
    'protocol_type', types.hdmf_common.DynamicTable( ...
        'description', 'category table for lab-specific recording metadata', ...
        'colnames', {'label'}, ...
        'id', types.hdmf_common.ElementIdentifiers( ...
            'data', int64([0:sweepCount-2]) ...
        ), ...
        'label', types.hdmf_common.VectorData( ...
            'data', Protocols, ...
            'description', 'Abbreviated Stimulus type: LP= Long Pulse, SP= Short Pulse' ...
        ) ...
    ) ...
);

% Add Current amplitude as column of stimulus table
 ic_rec_table.stimuli.colnames = [ic_rec_table.electrodes.colnames {'current_amplitude'}];
 ic_rec_table.stimuli.vectordata.set('current_amplitude', types.hdmf_common.VectorData( ...
    'data', [SweepAmp'], ...
    'description', 'Current amplitude of injected square pulse' ...
    ) ...
);

nwb.general_intracellular_ephys_intracellular_recordings = ic_rec_table;
%%    
filename = fullfile([outputfolder ,nwb.identifier]);
nwbExport(nwb, filename);    
 
end