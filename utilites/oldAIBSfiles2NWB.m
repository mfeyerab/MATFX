
% mainfolder = 'D:\conversion\Allen\First_release\cell_types\'; %fullfile(cd, '\test_cell\');
% outputfolder = 'D:\AIBS1\'; %[cd, '\'];
% CellTable = 'cell_types_specimen_details.mat';

function oldAIBSfiles2NWB(mainfolder, outputfolder, CellTable)

cellList = dir([mainfolder,'*.nwb']);
T = struct2table(load(CellTable));

for n = 1:length(cellList)
    
cellID = regexp(cellList(n).name,'\d*','Match');
disp(cellID)  
idx = find(strcmp(num2str(T.specimen__id1), cellID));
if contains(string(T.donor__species1(idx)),'Mus')                          % if mouse data
    %% Initializing variables for Sweep table construction    
    CS.noManuTag = 0; CS.swpCt = 1; CS.cellID = cellID;
    CS.filterFreq = 'NA'; CS.brigBal = 0; CS.holdI = 0; CS.capComp = 0;
    CS.PipOffset= []; CS.electOffset = NaN; % both??
    CS.sweep_series_objects_ch1 = []; CS.sweep_series_objects_ch2 = [];
    CS.SwpAmp = []; CS.StimOn = []; CS.StimOff = [];CS.StimDuration = [];
    CS.CompDataIdx = []; Protocols = cell.empty;
    CS.BinaryLP = []; CS.BinarySP = [];
    CS.filename = [mainfolder,cellList(n).name];
    %%   Initializing nwb file 
    nwb = NwbFile();
    nwb.identifier = cellList(n,1).name;
    nwb.session_description = ...
      'Characterizing intrinsic biophysical properties of cortical neurons; First release from AIBS';
    nwb.general_subject = types.core.Subject( ...
        'subject_id', char(T.donor__id(idx)), 'age', num2str(T.donor__age(idx)), ...
        'sex', char(T.donor__sex(idx)), 'species', char(T.donor__species1(idx)), ...
         'genotype', char(T.line_name1(idx)) );      
     nwb.general_institution = 'Allen Institute of Brain Science';
     device_name = 'unknown device';

     nwb.general_devices.set(device_name, types.core.Device());     
     nwb.general_source_script = 'custom matlab script using MATNWB';
     nwb.general_source_script_file_name = mfilename;


     %% Add anatomical data from histological processing

     anatomy = types.core.ProcessingModule(...
                         'description', 'Histological processing',...
                         'dynamictable', []  ...
                               );     
     T.Properties.VariableNames{49}= 'SomaLayerLoc';                           % change data type of table variables because categorical not accepted by NWB
     T.Properties.VariableNames{54}= 'DendriticType';
     T.Properties.VariableNames{1} = 'ReporterStatus';
     T.Properties.VariableNames{44} = 'Hemisphere';
     T.Properties.VariableNames{53} = 'ApicalDend';

     T.SomaLayerLoc = cellstr(T.SomaLayerLoc);
     T.DendriticType = cellstr(T.DendriticType);
     T.ApicalDend = cellstr( T.ApicalDend);
     T.ReporterStatus = cellstr(T.ReporterStatus);
     T.Hemisphere = cellstr(T.Hemisphere);
<<<<<<< Updated upstream
     
     table = table2nwb(T(idx,[1, 49, 44, 54]));  
     anatomy.dynamictable.set('Anatomical data', table);
=======

     AnaTab = util.table2nwb(T(idx,[1, 49, 44, 53, 54]));  
     anatomy.dynamictable.set('Anatomical data', AnaTab);
>>>>>>> Stashed changes
     nwb.processing.set('Anatomical data', anatomy);

    %% Getting start date from 1st recording of cell and checking for new session start 
     nwb.session_start_time = datetime(2018, 1, 21, 2, 30, 3);             % dummy datetime
    %% Getting run and electrode associated properties  
    device_link = types.untyped.SoftLink(['/general/devices/', device_name]); % lets see if that works

     CS.initialRa = h5read(CS.filename, ...
                  '/general/intracellular_ephys/Electrode 1/initial_access_resistance');

     CS.initialRa = cell2mat(regexp( CS.initialRa,'\d+\.?\d*','match'));          

    ic_elec = types.core.IntracellularElectrode( ...
            'device', device_link, ...
            'description', 'Properties of electrode and run associated to it',...
            'filtering', h5read(CS.filename, ...
                 '/general/intracellular_ephys/Electrode 1/filtering'),...
            'initial_access_resistance',  CS.initialRa,...
            'location', h5read(CS.filename, ...
                   '/general/intracellular_ephys/Electrode 1/location')...
               );
     info = h5info(CS.filename);                                                % pull info from file
     icElecPath = info.Groups(4).Groups(2).Groups.Name;
     ic_elec_name = ...
        icElecPath(find(icElecPath=='/', 1,'last')+1:length(icElecPath));

     nwb.general_intracellular_ephys.set(ic_elec_name, ic_elec);
     ic_elec_link = types.untyped.SoftLink(['/general/intracellular_ephys/' ic_elec_name]);       
    %% Getting the data

    for s = 1:length(info.Groups(1).Groups(2).Groups)

    CS.sweepPath = info.Groups(1).Groups(2).Groups(s).Name; 
    CS.sweepName = CS.sweepPath(find(CS.sweepPath=='/', 1,'last')+1:...
                              length(CS.sweepPath));
    CS.stimPath = ['/stimulus/presentation/', CS.sweepName] ;    
    CS.stimName = h5read(CS.filename,[CS.stimPath,'/aibs_stimulus_name']);
    if ~contains(CS.stimName, 'Test')
        if string(CS.stimName)== "Long Square" 
                CS.BinaryLP(CS.swpCt,1)  = true;
                CS.BinarySP(CS.swpCt,1)  = false;
        elseif string(CS.stimName)== "Short Square" 
                CS.BinaryLP(CS.swpCt,1)  = false;
                CS.BinarySP(CS.swpCt,1)  = true;
        else
                CS.BinaryLP(CS.swpCt,1)  = false;
                CS.BinarySP(CS.swpCt,1)  = false;   
        end  
         %% Import Sweeps with potential alignment of sampling rates       
         [nwb, CS]  = importSweeps(nwb, CS, ic_elec_link);  

            %% Save sweep info for Sweep table
         sweep_ch2 = types.untyped.ObjectView(['/acquisition/', CS.sweepName]);
         sweep_ch1 = types.untyped.ObjectView([...
                                     '/stimulus/presentation/', CS.sweepName]);
         CS.sweep_series_objects_ch1 = [CS.sweep_series_objects_ch1, sweep_ch1]; 
         CS.sweep_series_objects_ch2 = [CS.sweep_series_objects_ch2, sweep_ch2];
             if CS.BinaryLP(CS.swpCt)
                Protocols(CS.swpCt) = {'LP'};
             elseif CS.BinarySP(CS.swpCt)
                  Protocols(CS.swpCt) = {'SP'};   
             else
                 Protocols(CS.swpCt) = {CS.stimName};          
             end
         CS.swpCt = CS.swpCt + 1;
         
         disp([CS.sweepName, ' ',CS.stimName, ' converted'])
        end
    end

    %% Intracellular Recordings Table   
    CS.BinaryLP(isnan(CS.BinaryLP)) = false;
    CS.BinarySP(isnan(CS.BinarySP)) = false;
    CS.StimOn(isnan(CS.StimOn)) = false;
    CS.StimOff(isnan(CS.StimOff)) = false;
    CS.SwpAmp(isnan(CS.SwpAmp)) = false;

    CS.StimDuration = [];
    CS.StimDuration = CS.StimOff - CS.StimOn; 

    ic_rec_table = types.core.IntracellularRecordingsTable( ...
    'categories', {'electrodes', 'stimiuli', 'responses'}, ...
    'colnames', {},...
    'description', [ ...
        'A table to group together a stimulus and response from a single ', ...
        'electrode and a single simultaneous recording and for storing ', ...
        'metadata about the intracellular recording.'], ...
    'id', types.hdmf_common.ElementIdentifiers( ...
        'data', int16([0:CS.swpCt-2]) ...
    ) ...
    );

<<<<<<< Updated upstream
=======

>>>>>>> Stashed changes
    ic_rec_table.electrodes = types.core.IntracellularElectrodesTable( ...
        'description', 'Table for storing intracellular electrode related metadata.', ...
        'colnames', {'electrode'}, ...
        'id', types.hdmf_common.ElementIdentifiers( ...
            'data', int16([0:CS.swpCt-2]) ...
        ), ...
        'electrode', types.hdmf_common.VectorData( ...
<<<<<<< Updated upstream
            'data', repmat(types.untyped.ObjectView(ic_elec), sweepCount-1, 1), ...
=======
            'data', repmat(types.untyped.ObjectView('/general/intracellular_ephys/Electrode 1'),1, CS.swpCt-1), ...
>>>>>>> Stashed changes
            'description', 'Column for storing the reference to the intracellular electrode' ...
        ) ...
    );

    ic_rec_table.stimuli = types.core.IntracellularStimuliTable( ...
        'description', 'Table for storing intracellular stimulus related metadata.', ...
        'colnames', {'stimulus'}, ...
        'id', types.hdmf_common.ElementIdentifiers( ...
            'data', int16([0:CS.swpCt-2])  ...
        ), ...
        'stimulus', types.core.TimeSeriesReferenceVectorData( ...
            'description', 'Column storing the reference to the recorded stimulus for the recording (rows)', ...
            'data', struct( ...
                'idx_start', [CS.StimOn'], ...
                'count', [CS.StimDuration], ...
                'timeseries', [CS.sweep_series_objects_ch1]...
            )...
        )...
    );

    ic_rec_table.responses = types.core.IntracellularResponsesTable( ...
        'description', 'Table for storing intracellular response related metadata.', ...
        'colnames', {'response'}, ...
        'id', types.hdmf_common.ElementIdentifiers( ...
            'data', int16([0:CS.swpCt-2]) ...
        ), ...
        'response', types.core.TimeSeriesReferenceVectorData( ...
            'description', 'Column storing the reference to the recorded response for the recording (rows)', ...
            'data', struct( ...
                'idx_start', [CS.StimOn'], ...
                'count', [CS.StimDuration], ...
                'timeseries', [CS.sweep_series_objects_ch2]...
            )...
        )...
    );

    % Add protocol type as column of electrodes table

    ic_rec_table.categories = [ic_rec_table.categories, {'protocol_type'}];
    ic_rec_table.colnames = ic_rec_table.categories;

    ic_rec_table.dynamictable.set( ...
        'protocol_type', types.hdmf_common.DynamicTable( ...
            'description', 'category table for lab-specific recording metadata', ...
            'colnames', {'label'}, ...
            'id', types.hdmf_common.ElementIdentifiers( ...
                'data', int16([0:CS.swpCt-1]) ...
            ), ...
            'label', types.hdmf_common.VectorData( ...
                'data', Protocols, ...
                'description', 'Abbreviated Stimulus type: LP= Long Pulse, SP= Short Pulse' ...
            ) ...
        ) ...
    );

    % Add Current amplitude as column of stimulus table
     ic_rec_table.stimuli.colnames = [ ic_rec_table.stimuli.colnames {'current_amplitude'}];
     ic_rec_table.stimuli.vectordata.set('current_amplitude', types.hdmf_common.VectorData( ...
        'data', [single(CS.SwpAmp')], ...
        'description', 'Current amplitude of injected square pulse' ...
        ) ...
    );

    nwb.general_intracellular_ephys_intracellular_recordings = ic_rec_table;
    %%    
    filename = fullfile([outputfolder ,nwb.identifier]);
    nwbExport(nwb, filename);    
end
end
end